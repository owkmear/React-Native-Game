const data = {
  questions: {
    1: {
      theme: "Тонкости и неоднозначности языка",
      question: "Что будет выведено в консоль?",
      code: "let arr = [1, 2, 3];",
      correctAnswer: 4,
      variants: [
        "[1, 2, 3, length: 5]",
        "[1, 2, 3]",
        "[1, 2, 3, null, null]",
        "[1, 2, 3, <2 empty items>] либо [1, 2, 3, undefined, undefined]",
      ],
      explanation:
        "Массивы являются спископодобными объектами, чьи прототипы содержат методы для операций обхода и изменения массива. Ни размер массива, ни типы его элементов не являются фиксированными, поскольку размер массива может увеличиваться и уменьшаться в любое время, то нет, ровным счётом, никакой гарантии, что массив окажется плотным. Кроме того, в любой момент допускается установить свойство 'Array.length' для изменения размера массива. В данном конкрентном случае, происходит расширение массива, путём увеличения числового значения свойства 'Array.length' до 5. При этом, скажем так, расширенные элементы будут иметь значение 'undefined'.",
    },
    2: {
      theme: "Тонкости и неоднозначности языка",
      question:
        "Что будет выведено в консоль в результате выполнения данной функции?",
      code: "const foo = (a, b, c=333) => {",
      correctAnswer: 2,
      variants: [
        "111 222",
        "ReferenceError: arguments is not defined",
        "999 777",
        "SyntaxError: Unexpected token '='",
      ],
      explanation:
        "Стрелочные функции ('arrow functions') не имеют собственного объекта 'arguments', поэтому в теле стрелочных функций 'arguments' будет ссылаться на переменную в окружающей области видимости.",
    },
    3: {
      theme: "Тонкости и неоднозначности языка",
      question:
        "Что будет выведено в консоль в результате выполнения данного кода?",
      code: "const toString = Object.prototype.toString;",
      correctAnswer: 4,
      variants: [
        "[object Null]",
        "[object Object]",
        "null",
        "[object Undefined]",
      ],
      explanation:
        "Для корректного использования метода 'Object.prototype.toString()' с любым объектом, необходимо вызвать на нём функции 'Function.prototype.call()' или 'Function.prototype.apply()' передав объект, который хотим исследовать, первым параметром 'thisArgs'. Фактически же, мы не передали методу никакого объекта, соответственно тот резонно из раза в раз будет возвращать нам строковое представление 'undefined'.",
    },
  },
};

export default data;
